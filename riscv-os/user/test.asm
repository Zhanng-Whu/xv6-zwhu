
user/_test:     file format elf64-littleriscv


Disassembly of section .text:

0000000000000000 <func>:
#include "include/types.h"
#include "include/user.h"
int func(int a){
   0:	1141                	add	sp,sp,-16
   2:	e422                	sd	s0,8(sp)
   4:	0800                	add	s0,sp,16
    return a;
}
   6:	6422                	ld	s0,8(sp)
   8:	0141                	add	sp,sp,16
   a:	8082                	ret

000000000000000c <main>:
int main(int argc, char *argv[]){
   c:	1101                	add	sp,sp,-32
   e:	ec06                	sd	ra,24(sp)
  10:	e822                	sd	s0,16(sp)
  12:	e426                	sd	s1,8(sp)
  14:	e04a                	sd	s2,0(sp)
  16:	1000                	add	s0,sp,32
  18:	892a                	mv	s2,a0
    hello();
  1a:	032000ef          	jal	4c <hello>
    
    for(int i = 0; i < argc; i++){
  1e:	01205863          	blez	s2,2e <main+0x22>
  22:	4481                	li	s1,0
        hello();
  24:	028000ef          	jal	4c <hello>
    for(int i = 0; i < argc; i++){
  28:	2485                	addw	s1,s1,1
  2a:	fe991de3          	bne	s2,s1,24 <main+0x18>

    }
    return 0;
  2e:	4501                	li	a0,0
  30:	60e2                	ld	ra,24(sp)
  32:	6442                	ld	s0,16(sp)
  34:	64a2                	ld	s1,8(sp)
  36:	6902                	ld	s2,0(sp)
  38:	6105                	add	sp,sp,32
  3a:	8082                	ret

000000000000003c <start>:
#include "include/user.h"


void
start(int argc, char **argv)
{
  3c:	1141                	add	sp,sp,-16
  3e:	e406                	sd	ra,8(sp)
  40:	e022                	sd	s0,0(sp)
  42:	0800                	add	s0,sp,16
  int r;
  extern int main(int argc, char **argv);
  r = main(argc, argv);
  44:	fc9ff0ef          	jal	c <main>


  exit(r);
  48:	00c000ef          	jal	54 <exit>

000000000000004c <hello>:
# generated by usys.pl - do not edit
#include "include/syscall.h"
.global hello
hello:
 li a7, SYS_hello
  4c:	4885                	li	a7,1
 ecall
  4e:	00000073          	ecall
 ret
  52:	8082                	ret

0000000000000054 <exit>:
.global exit
exit:
 li a7, SYS_exit
  54:	4889                	li	a7,2
 ecall
  56:	00000073          	ecall
 ret
  5a:	8082                	ret

000000000000005c <fork>:
.global fork
fork:
 li a7, SYS_fork
  5c:	4891                	li	a7,4
 ecall
  5e:	00000073          	ecall
 ret
  62:	8082                	ret

0000000000000064 <wait>:
.global wait
wait:
 li a7, SYS_wait
  64:	488d                	li	a7,3
 ecall
  66:	00000073          	ecall
 ret
  6a:	8082                	ret

000000000000006c <exec>:
.global exec
exec:
 li a7, SYS_exec
  6c:	4895                	li	a7,5
 ecall
  6e:	00000073          	ecall
 ret
  72:	8082                	ret

0000000000000074 <dup>:
.global dup
dup:
 li a7, SYS_dup
  74:	489d                	li	a7,7
 ecall
  76:	00000073          	ecall
 ret
  7a:	8082                	ret

000000000000007c <open>:
.global open
open:
 li a7, SYS_open
  7c:	4899                	li	a7,6
 ecall
  7e:	00000073          	ecall
 ret
  82:	8082                	ret

0000000000000084 <mknod>:
.global mknod
mknod:
 li a7, SYS_mknod
  84:	48a1                	li	a7,8
 ecall
  86:	00000073          	ecall
 ret
  8a:	8082                	ret
