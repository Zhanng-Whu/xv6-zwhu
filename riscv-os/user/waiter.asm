
user/_waiter:     file format elf64-littleriscv


Disassembly of section .text:

0000000000000000 <foreverwait>:
#include "include/types.h"
#include "include/user.h"


// 用于处理孤儿进程
void foreverwait(){
   0:	1141                	add	sp,sp,-16
   2:	e406                	sd	ra,8(sp)
   4:	e022                	sd	s0,0(sp)
   6:	0800                	add	s0,sp,16
    for(;;){
        int wpid = wait((int *)0);
   8:	4501                	li	a0,0
   a:	066000ef          	jal	70 <wait>
        if(wpid < 0){
   e:	fe055de3          	bgez	a0,8 <foreverwait+0x8>
            hello();
  12:	046000ef          	jal	58 <hello>
            exit(1);
  16:	4505                	li	a0,1
  18:	048000ef          	jal	60 <exit>

000000000000001c <main>:
    }
}


char *argv1[] = { "test", "argv1", 0 };
int main(){
  1c:	1141                	add	sp,sp,-16
  1e:	e406                	sd	ra,8(sp)
  20:	e022                	sd	s0,0(sp)
  22:	0800                	add	s0,sp,16

    int pid = fork();
  24:	044000ef          	jal	68 <fork>
    if(pid == 0){
  28:	ed11                	bnez	a0,44 <main+0x28>
        exec("test", argv1);
  2a:	00001597          	auipc	a1,0x1
  2e:	fd658593          	add	a1,a1,-42 # 1000 <argv1>
  32:	00000517          	auipc	a0,0x0
  36:	04e50513          	add	a0,a0,78 # 80 <exec+0x8>
  3a:	03e000ef          	jal	78 <exec>
        exit(1);
  3e:	4505                	li	a0,1
  40:	020000ef          	jal	60 <exit>
    }

    foreverwait();
  44:	fbdff0ef          	jal	0 <foreverwait>

0000000000000048 <start>:
#include "include/user.h"


void
start(int argc, char **argv)
{
  48:	1141                	add	sp,sp,-16
  4a:	e406                	sd	ra,8(sp)
  4c:	e022                	sd	s0,0(sp)
  4e:	0800                	add	s0,sp,16
  int r;
  extern int main(int argc, char **argv);
  r = main(argc, argv);
  50:	fcdff0ef          	jal	1c <main>


  exit(r);
  54:	00c000ef          	jal	60 <exit>

0000000000000058 <hello>:
# generated by usys.pl - do not edit
#include "include/syscall.h"
.global hello
hello:
 li a7, SYS_hello
  58:	4885                	li	a7,1
 ecall
  5a:	00000073          	ecall
 ret
  5e:	8082                	ret

0000000000000060 <exit>:
.global exit
exit:
 li a7, SYS_exit
  60:	4889                	li	a7,2
 ecall
  62:	00000073          	ecall
 ret
  66:	8082                	ret

0000000000000068 <fork>:
.global fork
fork:
 li a7, SYS_fork
  68:	4891                	li	a7,4
 ecall
  6a:	00000073          	ecall
 ret
  6e:	8082                	ret

0000000000000070 <wait>:
.global wait
wait:
 li a7, SYS_wait
  70:	488d                	li	a7,3
 ecall
  72:	00000073          	ecall
 ret
  76:	8082                	ret

0000000000000078 <exec>:
.global exec
exec:
 li a7, SYS_exec
  78:	4895                	li	a7,5
 ecall
  7a:	00000073          	ecall
 ret
  7e:	8082                	ret
