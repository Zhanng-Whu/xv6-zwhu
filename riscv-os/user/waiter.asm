
user/_waiter:     file format elf64-littleriscv


Disassembly of section .text:

0000000000000000 <foreverwait>:
#include "include/file.h"
#include "include/fcntl.h"


// 用于处理孤儿进程
void foreverwait(){
   0:	1141                	add	sp,sp,-16
   2:	e406                	sd	ra,8(sp)
   4:	e022                	sd	s0,0(sp)
   6:	0800                	add	s0,sp,16
    for(;;){
        int wpid = wait((int *)0);
   8:	4501                	li	a0,0
   a:	09c000ef          	jal	a6 <wait>
        if(wpid < 0){
   e:	fe055de3          	bgez	a0,8 <foreverwait+0x8>
            hello();
  12:	07c000ef          	jal	8e <hello>
            exit(1);
  16:	4505                	li	a0,1
  18:	07e000ef          	jal	96 <exit>

000000000000001c <main>:
    }
}


char *argv1[] = { "test", "argv1", 0 };
int main(){
  1c:	1141                	add	sp,sp,-16
  1e:	e406                	sd	ra,8(sp)
  20:	e022                	sd	s0,0(sp)
  22:	0800                	add	s0,sp,16

    if(open("console", 0) < 0){
  24:	4581                	li	a1,0
  26:	00000517          	auipc	a0,0x0
  2a:	0ba50513          	add	a0,a0,186 # e0 <read+0xa>
  2e:	090000ef          	jal	be <open>
  32:	02054263          	bltz	a0,56 <main+0x3a>
        hello();
        mknod("console", CONSOLE, 0);
        open("console", 0);
    }

    int pid = fork();
  36:	068000ef          	jal	9e <fork>
    if(pid == 0){
  3a:	e121                	bnez	a0,7a <main+0x5e>
        exec("test", argv1);
  3c:	00001597          	auipc	a1,0x1
  40:	fc458593          	add	a1,a1,-60 # 1000 <argv1>
  44:	00000517          	auipc	a0,0x0
  48:	0a450513          	add	a0,a0,164 # e8 <read+0x12>
  4c:	062000ef          	jal	ae <exec>
        exit(1);
  50:	4505                	li	a0,1
  52:	044000ef          	jal	96 <exit>
        hello();
  56:	038000ef          	jal	8e <hello>
        mknod("console", CONSOLE, 0);
  5a:	4601                	li	a2,0
  5c:	4585                	li	a1,1
  5e:	00000517          	auipc	a0,0x0
  62:	08250513          	add	a0,a0,130 # e0 <read+0xa>
  66:	060000ef          	jal	c6 <mknod>
        open("console", 0);
  6a:	4581                	li	a1,0
  6c:	00000517          	auipc	a0,0x0
  70:	07450513          	add	a0,a0,116 # e0 <read+0xa>
  74:	04a000ef          	jal	be <open>
  78:	bf7d                	j	36 <main+0x1a>
    }

    foreverwait();
  7a:	f87ff0ef          	jal	0 <foreverwait>

000000000000007e <start>:
#include "include/user.h"


void
start(int argc, char **argv)
{
  7e:	1141                	add	sp,sp,-16
  80:	e406                	sd	ra,8(sp)
  82:	e022                	sd	s0,0(sp)
  84:	0800                	add	s0,sp,16
  int r;
  extern int main(int argc, char **argv);
  r = main(argc, argv);
  86:	f97ff0ef          	jal	1c <main>


  exit(r);
  8a:	00c000ef          	jal	96 <exit>

000000000000008e <hello>:
# generated by usys.pl - do not edit
#include "include/syscall.h"
.global hello
hello:
 li a7, SYS_hello
  8e:	4885                	li	a7,1
 ecall
  90:	00000073          	ecall
 ret
  94:	8082                	ret

0000000000000096 <exit>:
.global exit
exit:
 li a7, SYS_exit
  96:	4889                	li	a7,2
 ecall
  98:	00000073          	ecall
 ret
  9c:	8082                	ret

000000000000009e <fork>:
.global fork
fork:
 li a7, SYS_fork
  9e:	4891                	li	a7,4
 ecall
  a0:	00000073          	ecall
 ret
  a4:	8082                	ret

00000000000000a6 <wait>:
.global wait
wait:
 li a7, SYS_wait
  a6:	488d                	li	a7,3
 ecall
  a8:	00000073          	ecall
 ret
  ac:	8082                	ret

00000000000000ae <exec>:
.global exec
exec:
 li a7, SYS_exec
  ae:	4895                	li	a7,5
 ecall
  b0:	00000073          	ecall
 ret
  b4:	8082                	ret

00000000000000b6 <dup>:
.global dup
dup:
 li a7, SYS_dup
  b6:	489d                	li	a7,7
 ecall
  b8:	00000073          	ecall
 ret
  bc:	8082                	ret

00000000000000be <open>:
.global open
open:
 li a7, SYS_open
  be:	4899                	li	a7,6
 ecall
  c0:	00000073          	ecall
 ret
  c4:	8082                	ret

00000000000000c6 <mknod>:
.global mknod
mknod:
 li a7, SYS_mknod
  c6:	48a1                	li	a7,8
 ecall
  c8:	00000073          	ecall
 ret
  cc:	8082                	ret

00000000000000ce <write>:
.global write
write:
 li a7, SYS_write
  ce:	48a5                	li	a7,9
 ecall
  d0:	00000073          	ecall
 ret
  d4:	8082                	ret

00000000000000d6 <read>:
.global read
read:
 li a7, SYS_read
  d6:	48a9                	li	a7,10
 ecall
  d8:	00000073          	ecall
 ret
  dc:	8082                	ret
